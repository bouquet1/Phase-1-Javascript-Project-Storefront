create html, css, js, json at once - DONE
Write db.json data file -DONE
Have at least 5 elements - required - DONE
Have at least 3 attributes for those elements -required- DONE
test html (I added background color in the css to body) - DONE
link css, js and test (in js I console.log("try")) - DONE
json-server --watch db.json, test the locahost link - DONE
fetch data in js and test with console.log(json()) - DONE
Display practices from json to the page - DONE
how to add local images to json data - DONE
use facts somewhere else other than dailyQuickies. 
add button for daily quickies "let's go" or "start" - DONE
link images to json data and pull into the DOM - DONE
add other parts without worrying Css. Just display on the page as a start.:
    introduction -DONE
    dailyQuickies - DONE
    Drop-D menu
    frequency of practice choice - DONE
    streak tracker
    step tracker
    maybe likes to dailyQuickies
fix style of the page apply css
add "whole body stretch" to target area Drop-D
how to span Zen Zone in html without html
Second p messed everything up so I cahnged it to h6. In html you can have varipus <p> s inside different <div>. Learn how to write <p>s for different <div> with JS. 
Add Quickie Zone title - DONE


Project Requirements
    done - API or from a db.json file using json-server with at least 5 objects with each object having at least 3 attributes 

    done - Your entire app must run on a single page. There should be NO redirects or reloads. In other words, your project will contain a single HTML file

    - Use at least 2 distinct event listenersLinks to an external site. (2 events of different types) that enable interactivity. What this means is that, if you had 2 click events, that would only count as 1 distinct event and you would need to add at least 1 more. Think search or filter functionality, toggling dark/light mode, upvoting posts, etc. Each of your event listeners should also have its own unique callback function. These must be added using JavaScript's .addEventListener() method. Events embedded into HTML elements and CSS will not count toward the total. Please ask your instructor if you have questions regarding this requirement.

    - Your project must implement at least one instance of array iteration using available array methods (map, forEach, filter, etc). Manipulating your API data in some way should present an opportunity to implement your array iteration.

    - Follow good coding practices. Keep your code DRY (Do not repeat yourself) by utilizing functions to abstract repetitive code.

    - We also expect you to complete the following items prior to turning in your project:
        - [GITHUB REPOSITORY]: A well-written informative README.md file. This is the business card of your project and you really want it to look great! A template can be found here: makeareadme.comLinks to an external site.. Some additional considerations:
        If you used someone else's pictures or material please make sure you give them credit in your README.
        If you think your blog post and/or video are really good and would add value, add them to your README.md.
        If you want to go above and beyond, record a few seconds of yourself navigating the app and turn it into a gif. Then, add the gif in your README.md. That way anyone can get a sense of how your app works without leaving the README's page on GitHub!

        - [GITHUB REPOSITORY]: A detailed commit history (30+ commits is your minimum goal). Committing frequently is a fundamental best practice that you want to acquire as soon as possible. One day you will be collaborating on projects and you'll notice the importance of committing even more. Commit messages should be in the present tense, 50 characters or less and they should describe the changes you are committing.

        - A video walkthrough of your app â€” MUST be no longer than 3 minutes. In the video try to sound as professional as possible and walk through the functionality you built. A common way to record the video is to open a zoom meeting, share your screen, and then hit "record". Once the recording has been downloaded to your computer, upload it to YouTube Studio as "unlisted". That way only people with the link will be able to watch it. You don't have to share the video with anyone other than your instructors if you don't feel comfortable.

        - A blog post about this phase of the curriculum. This will serve as one of the four blogs you are required to complete to graduate. Please use these blogging guidelinesLinks to an external site. as you start your first blog.